name: Release CI

on:
  push:
    tags:
      - 'v*'
    branches:
      - main

env:
  GO_VERSION: '1.24'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run tests with coverage
      run: go test -v -coverprofile=coverage.txt ./...

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 80.0" | bc -l) )); then
          echo "Coverage is below 80%"
          exit 1
        fi

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        # Codecov now requires a token for all uploads (public and private)
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=10m

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build -o rrdnsd-${{ matrix.goos }}-${{ matrix.goarch }}.exe ./cmd/rrdnsd
        else
          go build -o rrdnsd-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/rrdnsd
        fi

    - name: Upload binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rrdnsd-${{ matrix.goos }}-${{ matrix.goarch }}
        path: rrdnsd-*

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [test, lint, build]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        find ./artifacts -name "rrdnsd-*" -type f -exec cp {} release/ \;
        cd release
        for file in rrdnsd-*; do
          if [[ "$file" == *.exe ]]; then
            zip "${file%.exe}.zip" "$file"
            rm "$file"
          else
            tar -czf "${file}.tar.gz" "$file"
            rm "$file"
          fi
        done
        ls -la

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
